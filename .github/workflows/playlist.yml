name: playlist

on:
  push:
    branches: production
    paths:
      - services/playlist/**
      
env: 
  SERVICE_PATH: services/playlist
  DOCKER_REPO_NAME: thayalangr/obs-playlist
  K8S_DEPLOYMENT_FILE_PATH: k8s/deployments/playlist.yml
  K8S_SERVICE_FILE_PATH: k8s/svc/playlist.yml
  IS_NEW_SERVICE: ${{ false }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Build and push New Docker Image
      if: env.IS_NEW_SERVICE == 'true'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: new
        path: ${{ env.SERVICE_PATH }}

    - name: Build and push Existing Docker Image
      if: env.IS_NEW_SERVICE == 'false'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: ${{ github.sha }} 
        path: ${{ env.SERVICE_PATH }}

    - name: k8s Create New Deployment
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }}

    - name: k8s Create New Service
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_SERVICE_FILE_PATH }}

    - name: k8s Update Existing Deployment
      if: env.IS_NEW_SERVICE == 'false'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: set image -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }} container=${{ env.DOCKER_REPO_NAME }}:${{ github.sha }} -n default

    - name: k8s Update Existing Service
      if: env.IS_NEW_SERVICE == 'false'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_SERVICE_FILE_PATH }}
