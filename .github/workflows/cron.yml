name: cron

on:
  push:
    branches: 
      - production
      - staging
    paths:
      - services/cron/**
      
env: 
  SERVICE_PATH: services/cron
  DOCKER_REPO_NAME: thayalangr/obs-cron
  CONFIG_PATH: services/cron/src/config/index.js
  K8S_DEPLOYMENT_NAME: obs-cron
  K8S_PRODUCTION_DEPLOYMENT_PATH: k8s/deployments/production/cron.yml
  K8S_STAGING_DEPLOYMENT_PATH: k8s/deployments/staging/cron.yml
  k8s_PRODUCTION_ING_PATH: k8s/ingress/production-ingress.yml
  k8s_STAGING_ING_PATH: k8s/ingress/staging-ingress.yml
  K8S_REDIS_DEPLOYMENT_PATH: k8s/deployments/redis.yml

jobs:
  production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: k8s Check and Apply New Redis
      if: env.SERVICE_PATH == 'services/core'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_REDIS_DEPLOYMENT_PATH }} -n production
    
    - name: Change Variables for Production
      run: |
        sed '1d' $CONFIG_PATH > temp.js ; mv temp.js $CONFIG_PATH ; sed -i '1iconst type = "production";' $CONFIG_PATH

    - name: Build and push Docker Image
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: production
        path: ${{ env.SERVICE_PATH }}

    - name: k8s Check and Apply New Deployment
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_PRODUCTION_DEPLOYMENT_PATH }} -n production

    - name: k8s Update Deployment
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: rollout restart deploy ${{ env.K8S_DEPLOYMENT_NAME }} -n production

    - name: k8s Check and Apply New Ingress
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.k8s_PRODUCTION_ING_PATH }} -n production
        
  staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: k8s Check and Apply New Redis
      if: env.SERVICE_PATH == 'services/core'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_REDIS_DEPLOYMENT_PATH }} -n staging

    - name: Change Variables for Staging
      run: |
        sed '1d' $CONFIG_PATH > temp.js ; mv temp.js $CONFIG_PATH ; sed -i '1iconst type = "staging";' $CONFIG_PATH

    - name: Build and push Docker Image
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: staging
        path: ${{ env.SERVICE_PATH }}

    - name: k8s Check and Apply New Deployment
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_STAGING_DEPLOYMENT_PATH }} -n staging

    - name: k8s Update Deployment
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: rollout restart deploy ${{ env.K8S_DEPLOYMENT_NAME }} -n staging

    - name: k8s Check and Apply New Ingress
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.k8s_STAGING_ING_PATH }} -n staging