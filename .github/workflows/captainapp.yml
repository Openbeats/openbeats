name: captainapp

on:
  push:
    branches: 
      - production
      - staging
    paths:
      - services/captainapp/**
      
env: 
  SERVICE_PATH: services/captainapp
  DOCKER_REPO_NAME: thayalangr/obs-captainapp
  K8S_DEPLOYMENT_FILE_PATH: k8s/deployments/captainapp.yml
  IS_NEW_SERVICE: ${{ true }}
  PRODUCTION_ING_PATH: k8s/ingress/production-ingress.yml
  STAGING_ING_PATH: k8s/ingress/staging-ingress.yml
  K8S_REDIS_DEPLOYMENT_FILE_PATH: k8s/deployments/redis.yml

jobs:
  production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Build and push New Docker Image
      if: env.IS_NEW_SERVICE == 'true'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: new
        path: ${{ env.SERVICE_PATH }}

    - name: Build and push Existing Docker Image
      if: env.IS_NEW_SERVICE == 'false'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: ${{ github.sha }} 
        path: ${{ env.SERVICE_PATH }}

    - name: k8s Create New Deployment Redis
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_REDIS_DEPLOYMENT_FILE_PATH }} -n default

    - name: k8s Create New Deployment
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }} -n default

    - name: k8s Update Existing Deployment
      if: env.IS_NEW_SERVICE == 'false'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: set image -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }} container=${{ env.DOCKER_REPO_NAME }}:${{ github.sha }} -n default

    - name: k8s Update Ingress
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.PRODUCTION_ING_PATH }} -n default
        
  staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Build and push New Docker Image
      if: env.IS_NEW_SERVICE == 'true'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: new
        path: ${{ env.SERVICE_PATH }}

    - name: Build and push Existing Docker Image
      if: env.IS_NEW_SERVICE == 'false'
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPO_NAME }}
        tags: ${{ github.sha }} 
        path: ${{ env.SERVICE_PATH }}

    - name: k8s Create New Deployment Redis
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_REDIS_DEPLOYMENT_FILE_PATH }} -n staging

    - name: k8s Create New Deployment
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }} -n staging

    - name: k8s Update Existing Deployment
      if: env.IS_NEW_SERVICE == 'false'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: set image -f ${{ env.K8S_DEPLOYMENT_FILE_PATH }} container=${{ env.DOCKER_REPO_NAME }}:${{ github.sha }} -n staging

    - name: k8s Update Ingress
      if: env.IS_NEW_SERVICE == 'true'
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f ${{ env.STAGING_ING_PATH }} -n staging